Features:
	Attachment system:
		Game objects can have attachments that give them extra functionality.
		If an object needs to generate light, it's given a Light attachment.
		If an object is supposed to damage the player, it gets a DangerZone attachment.
		An electric fence may get both a Light and a DangerZone. Same for an enemy on fire. A candelabra may have a Light for each candle.
		
		
	Data-driven:
		Data files (currently in YAML) contain specifications of scenes and objects. Rather than create a bunch of different classes (e.g. a class for every enemy), similar objects can use the same class, but different data (e.g. a wolf has a wolf model and attacks by biting you, while a wizard gets a wizard model and attacks with a fireball).
		Not yet implemented: It will soon be possible to define a set of base parameters in a common file and use those parameters as a prototype for an object in a scene. This allows for easy tweaking of individual instances of an object. For example, if you want multiple types of wizard that shoot different elements (fire, ice, lightning), you create a file for a BaseWizard that doesn't have any attacks, and then files for each type of wizard you want.
			# To define a wizard that fights with ice.
			# BaseWizardFile.yaml can contain info on attack patterns, model and texture, health, et cetera.
			- dataType: Fighter
			  prototype: "BaseWizardFile.yaml"
			  attacks:
  				- dataType: Attack
    			  damages:
      		        - dataType: damage
                      type: ICE
			And if you want to reuse enemies across multiple levels, but make them stronger in the later levels, you can just overwrite their attack power and health inside the level files.
		The data files also support scripting with AngelScript for update functions, AI, and scripted events (stepping in this spot triggers rockslide). Ideally, the designers will be able to do most of their work from the data files, and will not need to know anything about the underlying architecture of the engine.

	OpenSceneGraph rendering:
		OpenSceneGraph is an open source rendering engine used by NASA and Boeing.
		Highly cross-platform and scaleable. Runs on phones and dedicated image generator clusters. Out-of-box support for multi-core and multi-GPU applications. Supports OpenGL 1.0 through 4.2, as well as OpenGL ES.
		No Direct3D. OSG is closely-tied to OpenGL, and structured so as to maximize OpenGL performance. This also means that the way the scene looks to OSG is pretty much the same as it looks to OpenGL.
		Uses the C++ STL. Other engines reinvent the wheel with their own string class and such, but OSG uses the already available libraries that people are familar with.
	
	Not yet implemented: The editor:
		The framework will contain an editor similar to what Unreal and Unity3d have. But our editor will be designed to work for us, and will be available in-game on all platforms.
	
	
	
		
