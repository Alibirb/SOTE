Recommended Dependency versions:
	AngelScript: 2.29.0
	OpenSceneGraph: 3.2.x
	CEGUI: 0.8.x



Building on Linux:
	
	Install a few essential applications:
		cmake
		make
		codeblocks
	Install library dependencies. To make things simpler, try to use your package manager where possible, rather than building everything from source. Remember to install the development packages as well so you have header files. If you can't find a suitable package for your system, download and compile from source.
		OpenSceneGraph
		CEGUI
			Must use version 0.8
		Bullet
		AngelScript
			Don't use your package manager for this one, because we're using some of the addons that come with it.
			Download the latest version from http://angelcode.com/angelscript/downloads.html and extract it to the "dependencies/" folder, then use the makefile in "angelscript/sdk/angelscript/projects/gnuc/"
		yaml-cpp
		




Building on OS X:
	
	The way Code::Blocks launches the OS X Terminal launches it in your home directory, not the project directory. Since we have files we need to load, you'll need to modify the launching script (settings->Environment->"general settings"->"Terminal to launch console programs" to read:
		osascript -e 'tell app "Terminal"' -e 'activate' -e 'do script "cd Documents/SOTE; $SCRIPT"' -e 'end tell'
	If the base directory of SOTE is not "/Users/(yourName)/Documents/SOTE", you'll need to change the "cd" to reflect where you put SOTE.
	
	Install a few essential applications:
		cmake
		Code::Blocks
			http://codeblocks.org/downloads
		Xcode

	Install library dependencies: Create a folder named "dependencies" in the base SOTE directory and extract all the dependencies to that folder, then use CMake to generate Unix makefiles for each dependency and use make to compile.
		OpenSceneGraph
			http://openscenegraph.org
			As of the time of this writing, OSG doesn't set itself up to compile the way we want it to. We need to edit CMakeLists.txt a bit, around line 816:
				Change CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD from "c++98" to "c++11"
				Change CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY from "libstdc++" to "libc++"
				Change CMAKE_CXX_FLAGS so that it has "-std=c++11" and "-stdlib=libc++".	
		CEGUI
			http://cegui.org.uk/download
			Must use version 0.8
			Compile the dependencies package first.
				CEGUI has a bunch of options for which libraries to use as the backend. For the most part, it doesn't matter what you choose here. You'll need and xml parser, image loaders, and the GL stuff (GLEW, GLFW, and GLM). I chose expat, freetype2, GLEW, GLFW, GLM, PCRE, and Silly.
				Once the dependencies are built, copy the cegui-deps-0.8.x-src/dependencies folder to cegui-0.8.4 (actual folder names/paths may differ).
			When configuring CEGUI in cmake-gui, make sure to select the same libraries you selected when you build the dependencies.
			Apparently OS X has system libraries with the same names as standard open source libraries (e.g. libjpeg) included in CEGUI's dependencies. To avoid confusing the linker (SOTE uses the open source libs through CEGUI, and the OS X libs through OSG, so we need both), you need to tell CEGUI to link to its dependencies staticly so they won't interfere. To do so, enable "CEGUI_BUILD_SHARED_LIBS_WITH_STATIC_DEPENDENCIES" in cmake-gui.
			You may get an error about undefined symbols (specifically stuff like "_inflate") when building the SILLY codec. This is due to cmake screwing up and not telling the linker to link with libzlib.a To fix it:
				 Edit the file "cegui/src/ImageCodecModules/SILLY/CMakeFiles/CEGUISILLYImageCodec.dir/link.txt", adding "../../../../dependencies/lib/static/libzlib.a" to the end of it
				 You may also need to edit the file "cegui/src/ImageCodecModules/SILLY/CMakeFiles/CEGUISILLYImageCodec.dir/build.make". Around line 109, it should list a bunch of the dependencies that should be linked to. Add a line telling it to link to "dependencies/lib/static/libzlib.a"
		Bullet
			http://code.google.com/p/bullet/downloads/list
			May have to copy the libraries into build/lib/ after compiling.
		AngelScript
			Download from http://angelcode.com/angelscript/downloads.html and extract it to the "dependencies/" folder. If it comes out as a folder named "sdk", create a new folder named "angelscript" and put "sdk" in that.
			Use "angelscript/sdk/angelscript/projects/xcode/angelscript.xcodeproj"
			For some reason (maybe I did things wrong), XCode puts the library in a crazy location. Move libangelscript.a to "angelscript/sdk/angelscript/lib/"
			On OS X, we're using clang, which has AngelScript fails to account for when checking for C++11.
				In angelscript/sdk/addons/scripthelper/scripthelper.h, add "|| defined(__clang__)" to the end of the line that says "#if defined(__GNUC__) && __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8) " (line 53)
				Also replace
					bool hasAssignmentOperator = std::is_copy_assignable<T>::value && !std::has_trivial_copy_assign<T>::value;
					bool hasCopyConstructor = std::is_copy_constructible<T>::value && !std::has_trivial_copy_constructor<T>::value;
				with
					#if defined(__clang__)
						bool hasAssignmentOperator = std::is_copy_assignable<T>::value && !std::is_trivially_copy_assignable<T>::value;
						bool hasCopyConstructor = std::is_copy_constructible<T>::value && !std::is_trivially_copy_constructible<T>::value;
					#else
						bool hasAssignmentOperator = std::is_copy_assignable<T>::value && !std::has_trivial_copy_assign<T>::value;
						bool hasCopyConstructor = std::is_copy_constructible<T>::value && !std::has_trivial_copy_constructor<T>::value;
					#endif
		yaml-cpp
			https://code.google.com/p/yaml-cpp/downloads/list
			You'll need to install boost for yaml-cpp. You can do so through Fink, or just download Boost manually and put it in the dependencies folder
	
	There's some chance that we may have a HUGE rendering efficiency issue on OS X. The only Mac I have to test on is a fairly crappy old Macbook Pro with 128 MB of VRAM, and it got around 3 FPS or something. I think it's just a crappy video card, but I can't be sure.





Building on Windows:
		
	TDM-gcc Mingw method:
		First, install a few programs you'll need.
			CMake
			TDM-gcc
				http://tdm-gcc.tdragon.net/
				Make sure not to install TDM-gcc over an existing MinGW/GCC installation. It messes things up, especially if the previous installation is for 32 bit and you want to compile for 64 bit, or vice versa. If you have a folder named "C:/MinGW" or something like that, either delete it or rename it.
				If you need a different version of MinGW for some other project, you can try to compile SOTE with that. It should work, but I can't guarantee it.
			Code::Blocks
				http://codeblocks.org/
		Install library dependencies. All libraries should be downloaded and extracted to the "dependencies/" folder (you'll need to create the folder). The procedure to compile them usually comes down to using cmake-gui to configure options and generate project files, then using make to compile. Make sure to tell cmake to create files for mingw, not Visual Studio. Once cmake has generated the files, open up the TDM MinGW command prompt, and navigate to the folder with the newly-generated Makefile. To compile, enter "mingw32-make".
			CEGUI
				Compile the dependencies package first.
					CEGUI has a bunch of options for which libraries to use as the backend. For the most part, it doesn't matter what you choose here. You'll need and xml parser, image loaders, and the GL stuff (GLEW, GLFW, and GLM). I chose expat, freetype2, GLEW, GLFW, GLM, PCRE, and Silly.
					You may get some errors from .def files for some dependencies. If so, open the offending files, and comment out any lines that say "LIBRARY" (add a semicolon to the beginning of the line). This occured for me in src/libpng-1.4.7/scripts/pngwin.def and src/expat-2.0.1/lib/libexpat.def, but depending on which libraries you selected, you may get it in more/other/no places.
					Once the dependencies are built, copy the cegui-deps-0.8.x-src/dependencies folder to cegui-0.8.4 (actual folder names/paths may differ).
				When configuring CEGUI in cmake-gui, make sure to select the same libraries you selected when you build the dependencies.
			OpenSceneGraph
				You'll need the dependencies source package
					http://www.osgvisual.org/public_download/3rdParty_x86_x64-src_V9.7z
					extract that to the dependencies folder, alongside OpenSceneGraph.
					Start by building zlib
						Run "mingw32-make -fwin32/Makefile.gcc" from the zlib directory.
					Then do libpng
						You'll need to check the advanced options in cmake-gui, and point ZLIB_INCLUDE_DIR and ZLIB_LIBRARY to the right places.
					If you use other image formats (jpeg, tiff, et cetera), you'll need to build those, too.
					Copy the DLLs into the base "dependencies" folder (you'll need "zlib1.dll" and "libpng16.dll"
				Tell cmake to build the binaries in the root OSG directory (same place with CMakeLists.txt)
				Point ZLIB_INCLUDE_DIR and ZLIB_LIBRARY to the right places, then reconfigure and point PNG_LIBRARY_RELEASE and PNG_PNG_INCLUDE_DIR to the right places.
			Bullet
				http://code.google.com/p/bullet/downloads/list
				Use Bullet 2.x, not Bullet 3 (We'll likely update to Bullet 3 when appropriate).
				May need to add "#include <algorithm>" to any files that complain about std::max and std::min not being found
				If you get errors about fmin and fmax being redefined, try unchecking the options for building examples in cmake-gui.
				As of the time of this writing, there's a bug that causes gcc to seg fault when you compile Bullet with level 2 or 3 optimizations. As a workaround, specify build type "none" in cmake-gui so no optimizations are performed.
			AngelScript
				http://angelcode.com/angelscript/downloads.html
				Use "angelscript/sdk/angelscript/projects/mingw/makefile" to compile.
			yaml-cpp
				https://code.google.com/p/yaml-cpp/downloads/list	(note these are .tar.gz files, not .zip files. To extract them, you'll need an archive manager like peazip (http://peazip.sourceforge.net/).)
				This also requires boost, available at http://www.boost.org/
					Go for 1.55.0
					Boost is just header files, so just extract the archive to the dependencies folder. No compiling needed.
				After configuring, cmake-gui will tell you it couldn't find boost. Check the box marked "advanced" to see all cmake variables. Change "Boost_INCLUDE_DIR" to point to the folder with Boost.
				May need to add "#include <algorithm>" to any files that complain about std::max and std::min not being found
		Open the Code::Blocks project file and hit "build".
		Troubleshooting:
			When compiling the framework, you may get errors about libraries not being found. Check the build log to see if it says something like "skipping incompatible <the file you want it to link to>". This may mean you compiled the library as 32 bit instead of 64. Rerun cmake-gui (deleting the cache so it starts over), and make sure it's set to use the TDM-gcc compiler.
			If there are linker errors you don't understand, or the program fails to start, download Dependency Walker (http://www.dependencywalker.com/), which can help you fix any dependency errors. Note that using it directly on the project's executable doesn't work very well, because the search paths are relative to the SOTE base directory, not the directory where the executable is. My recommendation is try using it on the libraries you're linking with, or any of their example programs.
			If debugging isn't working, check to make sure you have your environment set up to use the TDM version of gdb (not the version that came with Code::Blocks)
