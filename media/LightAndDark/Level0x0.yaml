dataType: Level
children:
  - dataType: GameObject
    geometry: LightAndDark/Skybox.osgt
    position: [0, 0, 0]
    rotation: [0, 0, 0, 1]
    mass: 0
    physicsBodyGeneration: none
  
  - dataType: GameObject
    geometry: LightAndDark/Level0x0.osgt
    position: [0, 0, 0]
    rotation: [0, 0, 0, 1]
    mass: 0
    physicsBodyGeneration: triangleMeshShape
    
  - dataType: GameObject
    geometry: LightAndDark/LightCrystal.osgt
    position: [0, 0, 25]
    rotation: [0, 0, 0, 1]
    mass: 0
    physicsBodyGeneration: triangleMeshShape
    attachments:
      - dataType: Light
        position: [0, 0, 0]
        rotation: [0, 0, 0, 1]
        ambient: [1, 1, 1, 1]
        diffuse: [1, 1, 1, 1]
        specular: [1, 1, 1, 1]
        constantAttenuation: .000000000000001
        linearAttenuation: .0000000000000001
        quadraticAttenuation: .0000000000000001
    
  - dataType: Player
    name: Malhela
    maxHealth: 100.0
    team: Player
    geometry: LightAndDark/Malhela.osgt
    capsuleHeight: 1.25
    capsuleRadius: .4
    position: [25, 25, 5]
    rotation: [0, 0, 0, 1]
    resistances:
      dataType: unordered_map
      ACID: 0.0
      COLD: 0.0
      FIRE: 0.0
      PURE_MAGIC: 0.0
    attacks:
      - dataType: Attack
        damages:
          - dataType: damage
            amount: 2
            type: PURE_MAGIC
        duration: 2
    stateMachine:
      dataType: StateMachine
      defaultState: idle
      states:
        idle:
          dataType: State
          name: idle
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
              	//if(self.getClosestEnemy() !is null)
              	//	self.useBestAttackOn(self.getClosestEnemy());
                //else
              	//	print("No nearby enemies");
              }
        attacking:
          dataType: State
          name: attacking
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
                if(self.getCurrentAttack().done())
                	self.returnToPreviousState();
              }
