

TODO:
	DoneThisCommit:
		Added Light class
		Began work on LightAndDark level
		Added shaders for multitextured objects
		Lots of work to get passable lighting and materials
		Malhela character

	Current Task:
		Create LightAndDark level:
			Malhela character
			Light Crystal
			Outdoor scene

	Next Steps:
		Reorganization:
			Use factory function to create game objects and other Saveables. Also have a function that finds the proper destructor.
			Light should NOT inherit from GameObject. Instead, it should be an "Attachment", owned and controlled by a GameObject. The same should be done with DangerZone. That way, any object type can have a Light or DangerZone attached to it (e.g. an enemy with a flashlight can just be a normal Fighter with a Light attachment, an electric fence is a normal GameObject with a DangerZone, et cetera.)
		Perhaps some cleanup


		Need path-finding. Recast/Detour sounds good. Automatically creates navmesh.
		Improve import/export to allow it to link to prototypes.

		Make a class to wrap around the physics stuff
			Should also expose the physics info to the object files.
		Add mechanism for key bindings
		Expose all GameObject-derived classes to AngelScript (also exposing the type hierarchy (see http://www.angelcode.com/angelscript/sdk/docs/manual/doc_adv_class_hierarchy.html))

	Minor Tasks:
		logError and logWarning should allow multiple parameters.
		Use a namespace for all my classes

	Changes under consideration:
		Perhaps GameObjectData getter methods should use pass-by-reference so you can just pass in the variable you want to assign.
		the MainEventHandler should probably act as an event dispatcher that determines what object handles the events
		A component-entity system (or similar) might be useful to some extent to allow greater flexibility.
		Get rid of ControlledObject class and put that functionality into GameObject.

	Suggestions for design/organization:
		Use factory function to create game objects and other Saveables. Also have a function that finds the proper destructor.
		Light should NOT inherit from GameObject. Instead, it should be an "Attachment", owned and controlled by a GameObject. The same should be done with DangerZone. That way, any object type can have a Light or DangerZone attached to it (e.g. an enemy with a flashlight can just be a normal Fighter with a Light attachment, an electric fence is a normal GameObject with a DangerZone, et cetera.)

	Much later (after I've made the prototype)
		Possibly create my own data storage language:
			uses {} to denote elements (with matching-brace highlighting, it's much clearer than having to follow the indentation like in YAML)
			allows references to an element in a different file (like what I was doing with XML before)
				may not be a language feature, could just be part of GameObjectData's loading process
			C and C++ style comments


	Objects:
		Some mechanism by which you can easily move between a set list of places (teleportation, taxicab, etc.). Long glides, jumps, etc. may leave you stranded otherwise.
		Figure out how best to use AngelScript to specify object behavior (AngelScript class cannot inherit a C++ class, so it's not that simple.)
	Scripting:
		Add ability to load (not run) an AngelScript file, adding functions, variables, object types, etc to the current context/module.
			Can use the CompileFunction and CompileGlobalVar functions to add functions and variables.
	AI:
		Enemies need more intelligent behavior (e.g. dodge)
	Stuff for first playable
	Input:
		Should be able to register a function to be executed on key press/release. Function will likely be in AngelScript.
	Use a game clock that's separate from the real-time clock. For debugging purposes. Allows the game to run in slow/fast motion.
	Development cheats and features:
		Changing game speed
	Physics fixes:
		figure out proper collision filtering technique for ghost objects (there should be no collision response, but it still needs to be detected.)
	Make sure it all works on Windows
	Figure out what to do about YAML's hatred of tabs (either put a hack into the text editor so it treats spaces like tabs, or alter yaml-cpp so it allows tabs. Or use a different data language)
	Make it possible to have multiple levels loaded at once (and have all objects in one level ignore objects in others)
	Will probably want the light crystals to use special shaders that give them mysterious effects (rainbow colors and such)
	Clean up:



BUGS:
	input handler does not respond to releasing a key if Ctrl is pressed. Most likely due to the way OSG reports the button. I think it's a different value if a modkey is pressed.
	Console does not appear until window is resized
	Weapons do not point in the correct direction (rotated relative to the owner)
	Collision checking (in Level) may call onCollision() multiple times for the same pair of objects if they have multiple manifolds, or if Bullet takes multiple simulation steps for one rendering step.
	In the text editor, pressing the Delete key inserts a character.
	Can easily push through doors.
	Warping/teleporting is based on osg objects (not physics objects), and will warp the player to the skybox
	Lighting has issues if I try to use GL_LIGHT0. Currently using GL_LIGHT1 only.
	Specular lighting is screwed up. On a few objects (eyes and pants), it seems to show up only if the shadows. Probably an issue with the shader.
	Low Priority (it works, but might be ugly):

Bugs/issues I expect to see later:

Issues: (with other software)
	Not sure how to have multiple animations on an object in Blender. See http://wiki.blender.org/index.php/Doc:2.6/Manual/Animation/Basics/Actions

Things to remember to prevent bugs:
	It is NOT safe to alter the scene graph during a traversal (multi-threaded, multiple traversals happen at the same time). To ensure that doesn't happen, use the addToSceneGraph function for any new nodes, rather than adding them directly.
	When exporting Blender models, make sure the objects have UV maps, or else textures won't display.


Things to consider:
	Check out AngelScript/sdk/samples/game. Uses a "controller" class to control game objects. Might be a useful approach.


Useful notes:
	Entity systems:
		Rationalization for entities instead of traditional class-based system is that in most applications, the behavior of objects doesn't change, but in games, an object could change roles (e.g. an enemy is stunned and no longer attacks). An entity-component system allows behavior to be changed during runtime simply by adding and removing components.
	Quaternions:
		[w, x, y, z] = [cos(a/2), sin(a/2) * nx, sin(a/2)* ny, sin(a/2) * nz]
			where a=angle of rotation, {nx,ny,nz} is axis of rotation.

Research:
	Camera systems:
		Check out The Legend of Zelda: The Wind Waker for a good camera system that rarely needs manual adjustment

Scripting Uses:
	Input?--so that options can be set more easily. In addition to the standard key bindings, it'll also be possible to define custom controls that depend on more than a single binding.
	AI
	Testing purposes.
	"You want to expose capable, but soulless actors to your scripting code. The scripting code describes what the actors should do, but the C++ code takes care of the how."	-- http://stackoverflow.com/questions/609076/the-role-of-scripting-languages-in-game-programming
	Used to define the behavior of objects. C++ will only contain a handful of game object classes. AngelScript is responsible for determing the properties and behavior of each object.
	scene definition (movement, special effects, camera, sounds, etc.)


Engine features:
	Adaptive. Designed to minimize the amount of custom code that must be written.
	Objects are defined with YAML (or other serialization format).
		Can embed in the level file, link to an external file, or both (using external file as prototype and making necessary alterations in the level file).
			Can also define an object using another as a prototype (e.g. multiple versions of an enemy use a common base).
		Can embed AngelScript inside the YAML file, further increasing adaptability.
			Can attach functions to an object, to be used elsewhere (e.g. a door has the functions "open()" and "close()" defined in a central location, and called in response to signals from a switch.)
	Views a game as a collection of objects, behaviors, and relationships.

