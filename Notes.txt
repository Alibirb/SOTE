

TODO:
	DoneThisCommit:
		Improved the text editor so it can actually be used to edit the level file.
			File loading and saving
			Buttons to:
				Load file
				Save file
				Apply current buffer to scene.
				Load current scene into buffer.
			Fixed the input bugs.
			Got mouse wheel scrolling and clipboard to work.

	Current Task:

	Next Steps:
		Editor stuff:
			Game should pause when in Edit mode.
			Undo/Redo
			Text editor improvements:
				Syntax highlighting
					This will take quite a bit of work. We need to figure out not only how to parse the text and determine proper highlighting, we also need to figure out how to actually draw the highlighting.
					We'll need to create a subclass of FalagardMultiLineEditbox with a new draw implementation that will perform syntax highlighting.
						See http://cegui.org.uk/wiki/Performing_custom_rendering_at_the_right_time for example of deriving your own subclasses with customized drawing.
						FalagardMultiLineEditbox: cegui/src/WindowRendererSets/Core/MultiLineEditbox.cpp
						The best way to do it would probably be to use the existing formatting tag system in CEGUI, which currently only works for static text. We could make our editbox pass its text through an object that parses it and adds appropriate formatting tags, then send the formatted text through the rendering system instead of the actual text in the box. See http://cegui.org.uk/wiki/Formatting_Tags_in_CEGUI for an explanation of how the formatting tags work.
				Line numbers
				Use a monospace font
				Allow you to select which file to load/save
			Better GUI theme
			Cats



		Figure out a better system for displaying warnings and errors (currently the screen gets filled up with warnings from OSG and CEGUI and if one of MY warnings shows up, it's lost in the mess)
		Improve import/export to allow it to link to prototypes.

		Need path-finding. Recast/Detour sounds good. Automatically creates navmesh.

		Make a class to wrap around the physics stuff
		Expose all GameObject-derived classes to AngelScript (also exposing the type hierarchy (see http://www.angelcode.com/angelscript/sdk/docs/manual/doc_adv_class_hierarchy.html))

	Minor Tasks:
		logError and logWarning should be stream things like std::cout and std::cerr;
		Use a namespace for all my classes

	Changes under consideration:
		Perhaps GameObjectData getter methods should use pass-by-reference so you can just pass in the variable you want to assign.
		the MainEventHandler should probably act as an event dispatcher that determines what object handles the events
		Get rid of ControlledObject class and put that functionality into GameObject.
		Get rid of Fighter and just put that functionality into Entity
		Get rid of Player and give Entities an EntityController, either an AIController or PlayerController. Player characters will have an EntityController of both types, and switch between the two as appropriate.

	Before releasing this to the public in any way:
		FIX LICENSING ISSUES!!
			The osgBullet stuff and osgwTools are under a license that would require SOTE to be under the same or compatible license if I don't move them.
			The AngelScript addons may have some issues to fix, along with stdvector and some other stuff.
			The CEGUI implementation (CEGUIStuff) uses code from an old part of OSG and possibly some code from osgRecipes. The old OSG part isn't a problem (license does not require releasing the source code), but the osgRecipes part is a little unclear. The osgRecipes project is in the public domain, but it says individual recipes may have their own license.
			The classes beginning with "Improved" are improved versions of classes from other libraries, and may contain some of the original code of the base class.

	Much later
		Possibly create my own data storage language:
			uses {} to denote elements (with matching-brace highlighting, it's much clearer than having to follow the indentation like in YAML)
			allows references to an element in a different file (like what I was doing with XML before)
				may not be a language feature, could just be part of GameObjectData's loading process
			C and C++ style comments

	Use macros to automatically generate methods for serialization and creation.


	Objects:
		Some mechanism by which you can easily move between a set list of places (teleportation, taxicab, etc.). Long glides, jumps, etc. may leave you stranded otherwise.
	AI:
		Enemies need more intelligent behavior (e.g. dodge)
	Input:
		Should be able to register a function to be executed on key press/release. Function will likely be in AngelScript.
	Use a game clock that's separate from the real-time clock. For debugging purposes. Allows the game to run in slow/fast motion.
	Physics fixes:
		figure out proper collision filtering technique for ghost objects (there should be no collision response, but it still needs to be detected.)
	Figure out what to do about YAML's hatred of tabs (either put a hack into the text editor so it treats spaces like tabs, or alter yaml-cpp so it allows tabs. Or use a different data language)
	Make it possible to have multiple levels loaded at once (and have all objects in one level ignore objects in others)
	Will probably want the light crystals to use special shaders that give them mysterious effects (rainbow colors and such)
	Clean up:



BUGS:
	input handler does not respond to releasing a key if Ctrl is pressed. Most likely due to the way OSG reports the button. I think it's a different value if a modkey is pressed.
	Various 2D overlay stuff (TextDisplay and CEGUI) have rendering bugs that can be solved by resizing the window. Likely due to some calculations that use cached values of some sort. Parameters change (e.g. the window is moved so text should move with it), and things need to be recalculated. Change the window size, and you force recalculation.
	Weapons do not point in the correct direction (rotated relative to the owner)
	Collision checking (in Level) may call onCollision() multiple times for the same pair of objects if they have multiple manifolds, or if Bullet takes multiple simulation steps for one rendering step.
	In the text editor, pressing the Delete key inserts a character.
	Can easily push through doors.
	Warping/teleporting is based on osg objects (not physics objects), and will warp the player to the skybox
	Lighting has issues if I try to use GL_LIGHT0. Currently using GL_LIGHT1 only.
	Specular lighting is screwed up. On a few objects (eyes and pants), it seems to show up only in the shadows. Probably an issue with the shader.
	Seems like CEGUI can only create windows in the rendering thread.
		As a temporary work-around, I'm loading all windows through Viewer::realize() (with a GraphicsOperation). However, this does not allow new windows to be loaded after the program is set up.
		I think I can do stuff on the graphics thread by obtaining the GraphicsContext and calling add() on it, passing in an object that inherits from osg::Operation. If I make an Operation class to create a CEGUI object, I should be able to get it working.
		Another possibility is to do the loading inside CEGUIDrawable::DrawImplementation().
	CRITICAL:
		Not enough cats!!
	Low Priority (it works, but might be ugly):
		Inefficient debug rendering. Before getting the new graphics card, I thought it was just too much for my integrated graphics. However, a look at the NVIDIA settings program shows that the GPU utilization DROPS when I turn on debug rendering. I believe the issue is that the debug drawing is done sequentially, line-by-line. I need to split it up so it can render in parallel.

Bugs/issues I expect to see later:

Issues: (with other software)
	Not sure how to have multiple animations on an object in Blender. See http://wiki.blender.org/index.php/Doc:2.6/Manual/Animation/Basics/Actions

Things to remember to prevent bugs:
	It is NOT safe to alter the scene graph during a traversal (multi-threaded, multiple traversals happen at the same time). To ensure that doesn't happen, use the addToSceneGraph function for any new nodes, rather than adding them directly.
	When exporting Blender models, make sure the objects have UV maps, or else textures won't display.


Things to consider:
	Check out AngelScript/sdk/samples/game. Uses a "controller" class to control game objects. Might be a useful approach.


Useful notes:
	Entity systems:
		Rationalization for entities instead of traditional class-based system is that in most applications, the behavior of objects doesn't change, but in games, an object could change roles (e.g. an enemy is stunned and no longer attacks). An entity-component system allows behavior to be changed during runtime simply by adding and removing components.
	Quaternions:
		[w, x, y, z] = [cos(a/2), sin(a/2) * nx, sin(a/2)* ny, sin(a/2) * nz]
			where a=angle of rotation, {nx,ny,nz} is axis of rotation.

Research:
	Camera systems:
		Check out The Legend of Zelda: The Wind Waker for a good camera system that rarely needs manual adjustment

Scripting Uses:
	Input?--so that options can be set more easily. In addition to the standard key bindings, it'll also be possible to define custom controls that depend on more than a single binding.
	AI
	Testing purposes.
	"You want to expose capable, but soulless actors to your scripting code. The scripting code describes what the actors should do, but the C++ code takes care of the how."	-- http://stackoverflow.com/questions/609076/the-role-of-scripting-languages-in-game-programming
	Used to define the behavior of objects. C++ will only contain a handful of game object classes. AngelScript is responsible for determing the properties and behavior of each object.
	Scripted events


Engine features/design:
	Adaptive. Designed to minimize the amount of custom code that must be written.
	Objects are defined with YAML (or other serialization format).
		A level file will contain a list of all objects in the level. Objects can link to prototypes defined in separate files. The prototypes can link to more prototypes and allow for similar objects to share a common base.
		Can embed AngelScript inside the YAML file to define an object's behaviors.
		Will have some mechanism to selectively choose the parameters that get loaded (e.g. load a simpler model on devices with less resources, give the enemy less health on lower difficulty settings, et cetera)
	Allows subsystems to be swapped out to better suit the developers or the game.


Libraries to check out later:
	Recast/Detour
	Clipper-- for clipping and offsetting polygons. Used in Broken Age (http://www.angusj.com/delphi/clipper.php)
	GLSL Optimizer
	libGizmo
		https://github.com/CedricGuillemet/LibGizmo
		3D manipulation widgets

