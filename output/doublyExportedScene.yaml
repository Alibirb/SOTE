dataType: Level
children:
  - dataType: GameObject
    mass: 0
    geometry: DemoLevel.osgt
    physicsBodyGeneration: triangleMeshShape
    position: {x: 0, y: 0, z: 0}
    rotation: {x: 0, y: 0, z: 0, w: 1}
  - dataType: Controller
    radius: 5
    physicsBodyGeneration: none
    geometry: Switch.osgt
    mass: inf
    position: {x: 0, y: 28, z: 0}
    rotation: {x: 0, y: 0, z: 0, w: 1}
    functions:
      onInteraction: |
        void onInteraction(Controller@ self)
        {
        	self.sendMessage("toggle");
        }
        
    controlled:
      - dataType: Door
        mass: 0
        geometry: SlidingDoorOuter.osgt
        physicsBodyGeneration: convexHullShape
        position: {x: 0, y: 8, z: 0}
        rotation: {x: 0, y: 0, z: 0.7071067811865476, w: 0.7071067811865476}
        stateMachine:
          dataType: StateMachine
          defaultState: open
          states:
            closed:
              dataType: State
              name: closed
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.close();
                  	print("closing");
                  }
                  
            open:
              dataType: State
              name: open
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.open();
                   	print("opening");
                  }
                  
        innerPart:
          dataType: GameObject
          mass: 10
          physicsBodyGeneration: convexHullShape
          geometry: SlidingDoorInner.osgt
          position: {x: -3.742947e-08, y: 8.000032, z: 0.03988725}
          rotation: {x: 0.0007972605077072388, y: -0.0007972571326656799, z: 0.7071065809889887, w: 0.7071061595203842}
        functions:
          onMessage_toggle: |
            void onMessage_toggle(ControlledObject@ self)
            {
                if(self.getStateName() == "closed")
                    self.changeState("open");
                else
                    self.changeState("closed");
            }
            
      - dataType: Door
        mass: 0
        geometry: SlidingDoorOuter.osgt
        physicsBodyGeneration: convexHullShape
        position: {x: 0, y: 8, z: 0}
        rotation: {x: 0, y: 0, z: -0.7071067811865476, w: 0.7071067811865476}
        stateMachine:
          dataType: StateMachine
          defaultState: open
          states:
            open:
              dataType: State
              name: open
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.open();
                   	print("opening");
                  }
                  
            closed:
              dataType: State
              name: closed
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.close();
                  	print("closing");
                  }
                  
        innerPart:
          dataType: GameObject
          mass: 10
          geometry: SlidingDoorInner.osgt
          physicsBodyGeneration: convexHullShape
          position: {x: -3.374743e-05, y: 8.00013, z: 0.03944447}
          rotation: {x: 0.001716349319528547, y: 0.001354598426790447, z: 0.7071109537122394, w: -0.7070992369574921}
        functions:
          onMessage_toggle: |
            void onMessage_toggle(ControlledObject@ self)
            {
                if(self.getStateName() == "closed")
                    self.changeState("open");
                else
                    self.changeState("closed");
            }
            
      - dataType: Door
        mass: 0
        geometry: SlidingDoorOuter.osgt
        physicsBodyGeneration: convexHullShape
        position: {x: 8, y: 0, z: 0}
        rotation: {x: 0, y: 0, z: 0, w: 1}
        stateMachine:
          dataType: StateMachine
          defaultState: closed
          states:
            open:
              dataType: State
              name: open
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.open();
                   	print("opening");
                  }
                  
            closed:
              dataType: State
              name: closed
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.close();
                  	print("closing");
                  }
                  
        innerPart:
          dataType: GameObject
          mass: 10
          physicsBodyGeneration: convexHullShape
          geometry: SlidingDoorInner.osgt
          position: {x: 8.000256, y: -0.8762952, z: 0.0185317}
          rotation: {x: -0.01064128953250788, y: -0.003191054078723944, z: 0.216913040505664, w: 0.9761277184606688}
        functions:
          onMessage_toggle: |
            void onMessage_toggle(ControlledObject@ self)
            {
                if(self.getStateName() == "closed")
                    self.changeState("open");
                else
                    self.changeState("closed");
            }
            
      - dataType: Door
        mass: 0
        geometry: SlidingDoorOuter.osgt
        physicsBodyGeneration: convexHullShape
        position: {x: 8, y: 0, z: 0}
        rotation: {x: 0, y: 0, z: 1, w: 0}
        stateMachine:
          dataType: StateMachine
          defaultState: closed
          states:
            open:
              dataType: State
              name: open
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.open();
                   	print("opening");
                  }
                  
            closed:
              dataType: State
              name: closed
              functions:
                onEnter: |
                  void onEnter(Door@ self)
                  {
                  	self.close();
                  	print("closing");
                  }
                  
        innerPart:
          dataType: GameObject
          mass: 10
          physicsBodyGeneration: convexHullShape
          geometry: SlidingDoorInner.osgt
          position: {x: 7.999602, y: 0.9999784, z: 0.0391037}
          rotation: {x: 0.002407516907692126, y: -4.642735420380801e-05, z: 0.9999952241664332, w: -0.001934311859472563}
        functions:
          onMessage_toggle: |
            void onMessage_toggle(ControlledObject@ self)
            {
                if(self.getStateName() == "closed")
                    self.changeState("open");
                else
                    self.changeState("closed");
            }
            
  - dataType: DangerZone
    radius: 5
    physicsBodyGeneration: none
    geometry: Fire.osgt
    mass: inf
    position: {x: 0, y: 14, z: 1}
    rotation: {x: 0, y: 0, z: 0, w: 1}
    damages:
      - dataType: damage
        amount: 0.5
        type: FIRE
  - dataType: DangerZone
    radius: 5
    geometry: Fire.osgt
    physicsBodyGeneration: none
    mass: inf
    position: {x: 0, y: 17, z: 1}
    rotation: {x: 0, y: 0, z: 0, w: 1}
    damages:
      - dataType: damage
        amount: 0.5
        type: FIRE
  - dataType: DangerZone
    radius: 5
    geometry: Fire.osgt
    physicsBodyGeneration: none
    mass: inf
    position: {x: 0, y: 20, z: 1}
    rotation: {x: 0, y: 0, z: 0, w: 1}
    damages:
      - dataType: damage
        amount: 0.5
        type: FIRE
  - dataType: Player
    maxHealth: 100
    mass: 0
    maxSpeed: 6
    physicsBodyGeneration: none
    name: Alex
    team: Player
    geometry: humanmodelNoBones.osg
    position: {x: -0.687621, y: 25.98658, z: -0.04001921}
    rotation: {x: 0, y: 0, z: 0.9999998749426108, w: 0.0005001147495343353}
    stateMachine:
      dataType: StateMachine
      defaultState: idle
      states:
        idle:
          dataType: State
          name: idle
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
              	//if(self.getClosestEnemy() !is null)
              	//	self.useBestAttackOn(self.getClosestEnemy());
                //else
              	//	print("No nearby enemies");
              }
              
        attacking:
          dataType: State
          name: attacking
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
                if(self.getCurrentAttack().done())
                	self.returnToPreviousState();
              }
              
    resistances:
      dataType: unordered_map
      COLD: 0
      PURE_MAGIC: 0
      FIRE: 1
      ACID: 0
    attacks:
      - dataType: Attack
        duration: 2
        damages:
          - dataType: damage
            amount: 2
            type: FIRE
  - dataType: Player
    maxSpeed: 6
    maxHealth: 100
    physicsBodyGeneration: none
    name: Lilly
    geometry: humanmodelNoBones.osg
    mass: inf
    team: Player
    position: {x: -2.99211, y: 2.798382, z: -0.04003704}
    rotation: {x: 0, y: 0, z: 0.9991389986061647, w: -0.04148808822144546}
    stateMachine:
      dataType: StateMachine
      defaultState: idle
      states:
        idle:
          dataType: State
          name: idle
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
              	//if(self.getClosestEnemy() !is null)
              	//	self.useBestAttackOn(self.getClosestEnemy());
                //else
              	//	print("No nearby enemies");
              }
              
        attacking:
          dataType: State
          name: attacking
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
                if(self.getCurrentAttack().done())
                	self.returnToPreviousState();
              }
              
    resistances:
      dataType: unordered_map
      PURE_MAGIC: 0
      COLD: 0
      ACID: 0
      FIRE: 0
    attacks:
      - dataType: Attack
        duration: 2
        damages:
          - dataType: damage
            amount: 2
            type: PURE_MAGIC
  - dataType: Player
    maxSpeed: 6
    maxHealth: 100
    physicsBodyGeneration: none
    name: Tanner
    team: Player
    geometry: humanmodelNoBones.osg
    mass: inf
    position: {x: -2.091386, y: 3.113853, z: -0.04002762}
    rotation: {x: 0, y: 0, z: 0.9790609861307341, w: -0.2035671521555353}
    stateMachine:
      dataType: StateMachine
      defaultState: idle
      states:
        idle:
          dataType: State
          name: idle
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
              	//if(self.getClosestEnemy() !is null)
              	//	self.useBestAttackOn(self.getClosestEnemy());
                //else
              	//	print("No nearby enemies");
              }
              
        attacking:
          dataType: State
          name: attacking
          functions:
            onUpdate: |
              void onUpdate(Fighter@ self)
              {
                if(self.getCurrentAttack().done())
                	self.returnToPreviousState();
              }
              
    resistances:
      dataType: unordered_map
      NAP: 1
      PURE_MAGIC: 0
      ACID: 0
      FIRE: 0
      COLD: 0
    attacks:
      - dataType: Attack
        duration: 2
        damages:
          - dataType: damage
            amount: 2
            type: NAP